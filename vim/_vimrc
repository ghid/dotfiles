" source $VIMRUNTIME/vimrc_example.vim

"{{{1 General Customization

"{{{2 Setup vim-plug
call plug#begin('$HOME/vimfiles/pack/plugged')
source $HOME/vimfiles/plugged.vim

source $LOCALAPPDATA/vim-config/plugins/vim-lsp.vim
source $LOCALAPPDATA/vim-config/plugins/emmet.vim
source $LOCALAPPDATA/vim-config/plugins/quickrun.vim
source $LOCALAPPDATA/vim-config/plugins/ctrlp.vim
" source $LOCALAPPDATA/vim-config/plugins/ale.vim
source $LOCALAPPDATA/vim-config/plugins/fern.vim
source $LOCALAPPDATA/vim-config/plugins/hexokinase.vim
source $LOCALAPPDATA/vim-config/plugins/python-syntax.vim

call plug#end()
"}}}

"{{{2 Customize VIM 
language messages en
set tabstop=4 softtabstop=4
set shiftwidth=4
set expandtab
set autoindent
set smartindent
set colorcolumn=80
set signcolumn=yes
set nocursorline
set cpoptions+=$
set diffopt=vertical
set directory=$HOME/vimfiles/swapdir
set encoding=utf-8
set formatoptions-=o
set hidden
set hlsearch
set incsearch
set langmenu=en_US.UTF-8
set laststatus=2
set listchars=tab:\›\ ,eol:¬
set nocompatible
set relativenumber
set number
set nocursorline
set noerrorbells
set belloff=all
set noshowmode
set path+=**
set pythonthreedll=python39.dll
set scrolloff=8
set showbreak=●
set showtabline=2
set smartindent
set wildignore+=NTUSER.DAT*,.git/**,node_modules/**
if filereadable($HOME . "/vimfiles/" . $MYVIMPROFILE) | source $HOME/vimfiles/$MYVIMPROFILE | endif
"}}}2

"{{{2 Customize Colorscheme
if (has("termguicolors"))
	set termguicolors
endif
set background=dark
let g:gruvbox_italics = 0
let g:gruvbox_transp_bg = 0
colorscheme gruvbox8
"}}}2

"{{{2 Maintain undo history between sessions
set noswapfile
set nobackup
set undofile
set undodir=$HOME/vimfiles/undodir
"}}}

"{{{2 Setup netrw 
" let g:netrw_banner = 1
" let g:netrw_liststyle = 1
" let g:netrw_browse_split = 4
" let g_netrw_altv = 1
" let g:netrw_winsize = 25
" let g:netrw_keepdir = 0
" let g:netrw_scp_cmd='C:\"Program Files"\PuTTY\pscp.exe -q'
let g:netrw_scp_cmd='C:/msys64/mingw64/bin/pscp.exe -q'
let g:netrw_silent=1
"}}}

"{{{2 Setup grep program 
set grepprg=mack\ --nogroup\ --column\ -k\ --nocolor\ --filename\ $*
set grepformat=%f:%l:%c:%m
"}}}2

"{{{2 Setup shell
set shell=c:\Windows\System32\cmd.exe
" set shell=C:\msys64\usr\bin\zsh.exe\ --login
" set shell=c:/msys64/usr/bin/bash
" set shell=c:/msys64/usr/bin/zsh 
"}}}2

"{{{2 Mappings
let mapleader = " "
nnoremap <C-l> :redraw!<CR>
nnoremap <leader>h <C-w>h
nnoremap <leader>j <C-w>j
nnoremap <leader>k <C-w>k
nnoremap <leader>l <C-w>l
nnoremap <leader>C <C-w>c<CR>
nnoremap <leader>W :vertical resize 90<CR>
nnoremap <leader>L :set list!<CR>
nnoremap <leader>ch :let @/=''<CR>
vnoremap <leader>c "+y
vnoremap <leader>x "+x
noremap <leader>p "+p
noremap <leader>ev :tabnew<CR>:edit $MYVIMRC<CR>
noremap <leader>sv :source $MYVIMRC<CR>:call functions#SetupCanvas()<CR>
noremap <leader>ef :tabnew<CR>:edit $HOME/vimfiles/autoload/functions.vim<CR>
noremap <leader>ep :tabnew<CR>:edit $HOME/vimfiles/plugged.vim<CR>
noremap <expr> <leader>es ":vsplit $HOME/vimfiles/ftplugin/" . &filetype . "/" . &filetype . ".xpt.vim<CR>"
noremap <leader>/ :call functions#ToggleComment()<CR>
nnoremap <leader>R :QuickRun<CR>
vnoremap <leader>R :QuickRun<CR>
nnoremap <leader>QQ :qa!<CR>
nnoremap <silent> <leader>ml :call functions#AppendModeline()<CR>
inoremap <C-l> <right>
inoremap <S-Return>	<C-o>A
nnoremap <S-Return> A
inoremap <C-Return> <C-o>o
inoremap <C-BS> <Esc>diwa
nnoremap <leader>al :ALELint<CR><C-l>
nnoremap <leader>an :ALENext<CR><C-l>
noremap <leader>ap :ALEPrevious<CR><C-l>
vnoremap <leader>be c<c-r>=system('b64enc -e ' . &fenc, @")<cr><esc>
vnoremap <leader>bd c<c-r>=system('b64dec -e ' . &fenc, @")<cr><esc>
noremap <C-Left> :bprev<CR>
noremap <C-Right> :bnext<CR>
nnoremap - :Fern . -toggle -drawer<CR>
" inoremap <silent><expr> <tab> pumvisible() ? coc#_select_confirm()
			" \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
" nmap <leader>gd <Plug>(coc-definitions)
" nmap <leader>gr <Plug>(coc-references)
nnoremap <C-p> :Files!<CR>
nmap <leader>ob <Plug>(openbrowser-open)
"}}}2

"{{{2 Commands
command! -register CopyMatches call functions#CopyMatches(<q-reg>)
"}}}2

"{{{2 Auto Commands
if has("autocmd")
	" autocmd ColorScheme * call functions#Statusline()
	filetype on
	filetype plugin indent on
	" set omnifunc=syntaxcomplete#Complete
	augroup VIM
		autocmd!
		autocmd FileType vim let b:comment_leader="\" "
	augroup END
	augroup STATUSLINE
		autocmd!
		autocmd WinEnter * setlocal statusline=%!functions#Statusline()
		autocmd WinLeave * setlocal statusline=%!functions#StatuslineInactive()
		hi User1 gui=reverse
	augroup END
	augroup AHK
		autocmd!
		autocmd FileType autohotkey setlocal fileencoding=utf-8 commentstring=;%s
		autocmd FileType autohotkey let b:comment_leader="; "
		autocmd FileType autohotkey let b:AutoPairs = {'(':')', '[':']', '{':'}', '"':'"', "'":"'"}
	augroup JVM
		autocmd!
		autocmd FileType groovy,java,scala,kotlin setlocal commentstring=//%s
		autocmd FileType groovy,java,scals,kotlin let b:comment_leader="// "
		autocmd FileType groovy,java let b:AutoPairs = {'(':')', '[':']', '{':'}', '"':'"', "'":"'"}
	augroup BAT
		autocmd!
		autocmd FileType dosbatch let b:comment_leader=":: "
	augroup END
	augroup LDIF
		autocmd!
		autocmd FileType ldif setlocal textwidth=76 wrap commentstring=#%s
	augroup END
	augroup LUA
		autocmd!
		autocmd FileType lua let b:comment_leader="-- "
	augroup END
	augroup WEB
		autocmd!
		autocmd FileType css,scss,sass,html,json,jsp,yaml
					\ setlocal tabstop=2 shiftwidth=2 softtabstop=2
	augroup END
	augroup MARKDOWN
		autocmd!
		autocmd FileType markdown setlocal textwidth=80
	augroup END
	augroup PLANTUML
		autocmd!
		autocmd FileType puml,plantuml
					\ setlocal tabstop=2 shiftwidth=2 softtabstop=2
		autocmd FileType puml,plantuml let b:comment_leader="' "
		autocmd FileType puml,plantuml let b:AutoPairs = {'(':')', '[':']', '{':'}', '"':'"'}
	augroup END
	augroup PY
		autocmd!
		autocmd FileType python
					\ setlocal number autoindent expandtab textwidth=80
					\ tabstop=4 shiftwidth=4 softtabstop=0 smarttab
		autocmd FileType python let b:comment_leader="#"
		autocmd FileType python let b:ale_fixers = ["black", "mypy"]
	augroup END
	augroup HASKELL
		autocmd!
		autocmd FileType haskell,lhaskell
					\ setlocal textwidth=80 softtabstop=0 smarttab nocindent
		autocmd FileType haskell let b:comment_leader="-- "
	augroup END
	augroup YAML
		autocmd!
		autocmd FileType yaml,sh
					\ setlocal tabstop=2 shiftwidth=2	
		autocmd FileType yaml,sh let b:comment_leader="# "
	augroup END
	augroup XPT.VIM
		autocmd!
		autocmd FileType xpt.vim let b:AutoPairs = {'(':')', '[':']', '{':'}', '"':'"', "'":"'", '`':'^'}
	augroup END
	augroup my-glyph-palette
	  autocmd! *
	  autocmd FileType fern call glyph_palette#apply()
	  " autocmd FileType nerdtree,startify call glyph_palette#apply()
	augroup END
endif
"}}}2

" Show syntax highlighting groups for word under cursor
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc
nmap <C-x> :call <SID>SynStack()<CR>
"}}}1

"{{{1 Plugin Customization

"{{{2 Open-Browser
	" let g:openbrowser_browser_commands = [
	" \   {'name': 'C:\Program Files (x86)\Google\Chrome Beta\Application\chrome.exe',
	" \    'args': ['start', '{browser}', '{uri}']}
	" \]
"}}}

"}}}1


" vim:tw=78:ts=4:sts=4:sw=4:noet:ft=vim:nobomb
" vim:fdm=marker
